{"version":3,"sources":["pages/Header/index.js","pages/Item/index.js","pages/List/index.js","pages/Footer/index.js","App.js","index.js"],"names":["Header","state","todoName","handle","e","value","target","setState","trim","handleConfirm","keyCode","props","addTodo","className","type","placeholder","this","onChange","onKeyDown","Component","Item","isShow","handleEnter","handleLeave","handleClick","delId","todo","id","delTdo","handleChecked","checkeIsDone","onMouseEnter","onMouseLeave","checked","isDone","onClick","style","display","List","todos","map","item","Footer","allTotal","doneTotal","updateTodoIsDone","allDone","App","todoObj","length","newTodos","push","console","log","forEach","flg","every","filter","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.446518df.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './index.css'\r\nexport default class Header extends Component {\r\n  state = {\r\n    todoName: ''\r\n  }\r\n  handle = e => {\r\n    \r\n\r\n    const value = e.target.value\r\n    this.setState({\r\n      todoName: value.trim()//清除空格\r\n    })\r\n  }\r\n  handleConfirm = e => {\r\n    // console.log(this.props.todos);\r\n    const keyCode = e.keyCode\r\n   \r\n    if (keyCode === 13) {\r\n      if(!this.state.todoName) return //什么都不输入的时候（或者输入空格的时候），直接退出函数。空格使用todoName.trim()清除空格\r\n      this.props.addTodo(this.state.todoName)\r\n      //点击添加后，清空文本框的值\r\n      this.setState({\r\n        todoName: ''\r\n      })\r\n\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <div className='todo-header'>\r\n        <input\r\n          type='text'\r\n          placeholder='请输入你的任务名称，按回车键确认'\r\n          value={this.state.todoName}\r\n          onChange={this.handle}\r\n          onKeyDown={this.handleConfirm}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport './index.css'\r\nexport default class Item extends Component {\r\n  state = {\r\n    // 跟视图渲染有关的数据,都应该定义在状态里面\r\n    isShow: false\r\n  }\r\n\r\n  handleEnter = () => {\r\n\r\n    this.setState({\r\n      isShow: true\r\n    })\r\n  }\r\n\r\n\r\n\r\n  handleLeave = () => {\r\n\r\n    this.setState({\r\n      isShow: false\r\n    })\r\n  }\r\n\r\n  //点击删除\r\n  handleClick = () => {\r\n\r\n    const delId = this.props.todo.id\r\n    this.props.delTdo(delId)\r\n    // console.log(this.props.todo.id);\r\n    //写一个删除函数\r\n  }\r\n\r\n  // 点击选中\r\n  handleChecked = () => {\r\n    let { todo } = this.props\r\n    const id = todo.id\r\n    // console.log(id);\r\n    this.props.checkeIsDone(id)\r\n    // console.log(todo);\r\n  }\r\n\r\n  render() {\r\n    const { todo } = this.props\r\n    // console.log(todo.isDone);\r\n    return (\r\n\r\n      //给Li绑定事件,鼠标移入的时候，鼠标移出的时候\r\n      <li onMouseEnter={this.handleEnter} onMouseLeave={this.handleLeave} >\r\n        <label>\r\n          {/* 当input被选中时， todo.isDone */}\r\n          <input type='checkbox' checked={todo.isDone} onChange={this.handleChecked} />\r\n\r\n          {/* 给span加上删除的样式，当isDone的时候，加上删除的样式 */}\r\n          <span className={todo.isDone ? 'done' : ''}>{todo.todoName}</span>\r\n\r\n        </label>\r\n\r\n        <button\r\n          onClick={this.handleClick}\r\n          className='btn btn-danger'\r\n          style={{ display: this.state.isShow ? 'block' : 'none' }}>\r\n          删除\r\n        </button>\r\n      </li>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Item from '../Item'\r\nimport './index.css'\r\nexport default class List extends Component {\r\n  render() {\r\n    // console.log(this.props.delTdo);\r\n\r\n    return (\r\n      <ul className='todo-main'>\r\n        {\r\n          this.props.todos.map(item => (\r\n            \r\n            <Item key={item.id} todo={item} delTdo={this.props.delTdo} checkeIsDone={this.props.checkeIsDone}></Item>\r\n          ))\r\n        }\r\n        \r\n      </ul>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport './index.css'\r\n\r\n\r\nexport default class Footer extends Component {\r\n\r\n\trender() {\r\n\t\t\r\n\t\t// console.log(this.props.allTotal);\r\n\t\t// console.log(this.props.doneTotal);\r\n\t\treturn (\r\n\t\t\t<div className='todo-footer'>\r\n\t\t\t\t<label>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype='checkbox'\r\n\t\t\t\t\t\tchecked={this.props.allTotal===this.props.doneTotal &&this.props.doneTotal!==0}\r\n\t\t\t\t\t\tonChange={this.props.updateTodoIsDone}\r\n\r\n\t\t\t\t\t/>\r\n\t\t\t\t</label>\r\n\t\t\t\t<span>\r\n\t\t\t\t\t<span>已完成{this.props.doneTotal}</span> / 全部{this.props.allTotal}\r\n\t\t\t\t</span>\r\n\t\t\t\t<button\r\n\t\t\t\t\tclassName='btn btn-danger'\r\n\t\t\t\t\tonClick={this.props.allDone}\r\n\t\t\t\t>清除已完成任务\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nimport Header from './pages/Header'\r\nimport List from './pages/List'\r\nimport Footer from './pages/Footer'\r\n\r\nimport './App.css'\r\nexport default class App extends Component {\r\n  state = {\r\n    todos: [\r\n      {\r\n        id: 1,\r\n        todoName: \"吃饭\",\r\n        isDone: true,\r\n      },\r\n      {\r\n        id: 2,\r\n        todoName: \"睡觉\",\r\n        isDone: false,\r\n      },\r\n      {\r\n        id: 3,\r\n        todoName: \"洗脚\",\r\n        isDone: false,\r\n      }\r\n    ]\r\n  }\r\n  //添加\r\n  addTodo = value => {\r\n    //id 设置的思路：要是id不重复，先判定数组里面有没有内容，没有就写死，id为1，有内容就找到最后一个元素的 id，在加一，就是新插入元素的id\r\n    //this.state.todos.length\r\n\r\n    let { todos } = this.state\r\n    // let {newTodos}=[...todos]\r\n    const id = this.state.todos.length ? todos[todos.length - 1].id + 1 : 1\r\n    // console.log(id);\r\n    const todoObj = {\r\n      id,\r\n      todoName: value,\r\n      isDone: false\r\n    }\r\n\r\n    const newTodos = [...this.state.todos]\r\n    newTodos.push(todoObj)\r\n    this.setState({\r\n      todos: newTodos\r\n    })\r\n    // console.log(todoObj);\r\n  }\r\n  // 删除\r\n  delTdo = delId => {\r\n    // console.log(delId);\r\n    console.log();\r\n    const newTodos = []\r\n    this.state.todos.forEach(item => {\r\n      if (delId !== item.id) {\r\n        newTodos.push(item)\r\n      }\r\n      return newTodos\r\n    })\r\n    this.setState({\r\n      todos: newTodos\r\n    })\r\n\r\n  }\r\n\r\n  //选中之后改变isDone\r\n  checkeIsDone = (id) => {\r\n    let { todos } = this.state\r\n    const newTodos = [...todos]\r\n    newTodos.forEach((item) => {\r\n      // console.log(item.id);\r\n      item.isDone = (item.id === id) ? (item.isDone = !item.isDone) : (item.isDone)\r\n      return newTodos;\r\n    })\r\n    this.setState({\r\n      todos: newTodos\r\n    })\r\n  }\r\n  // 定义一个函数，用来改变 全部选中按钮的状态\r\n  updateTodoIsDone = () => {\r\n    let { todos } = this.state\r\n    const newTodos = [...todos]\r\n    const flg = newTodos.every(item => item.isDone)\r\n    newTodos.forEach((item) => {\r\n      item.isDone = !flg\r\n    })\r\n    this.setState({\r\n      todos: newTodos\r\n    })\r\n  }\r\n\r\n  // 定义一个函数用来清除全部以完成任务 \r\n  allDone = () => {\r\n    const newTodos = []\r\n    this.state.todos.forEach((item) => {\r\n      if (!item.isDone) {\r\n        newTodos.push(item)\r\n      }\r\n    })\r\n    this.setState({\r\n      todos: newTodos\r\n    })\r\n  }\r\n\r\n\r\n  render() {\r\n    // console.log(this.state.todos.length);\r\n    //定义任务总数和完成的任务数量 ，出入footer组件里面接收就行 \r\n    const allTotal = this.state.todos.length;\r\n    const doneTotal = this.state.todos.filter(item => item.isDone).length\r\n\r\n\r\n    return (\r\n      <div className='todo-container'>\r\n        <div className='todo-wrap'>\r\n          <Header addTodo={this.addTodo}></Header>\r\n          <List todos={this.state.todos} delTdo={this.delTdo} checkeIsDone={this.checkeIsDone}></List>\r\n          <Footer todos={this.state.todos} allTotal={allTotal} doneTotal={doneTotal} updateTodoIsDone={this.updateTodoIsDone} allDone={this.allDone}></Footer>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","// 入口文件\r\nimport React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport './index.css'\r\nReactDOM.render(<App></App>, document.getElementById('root'))\r\n\r\n// 复习\r\n// 1. react中通过js写html结构 --> jsx\r\n// 2. 浏览器不认识, 通过babel对jsx进行编译. 这样就实现了在js中直接写标签的功能\r\n// 3. 在jsx中使用数据 ==> 要用到一个插值表达式 {}\r\n// 4. 需要注意: 1. 插值表达式中不能写if或者是循环语句\r\n//              2. 可以写任何表达式,但是不要直接渲染对象/函数\r\n// 5. 列表渲染: 一般拿到的数据都是数组. 调用数组的map方法.得到一个新的数组.直接渲染新的数据\r\n// 注意点: 一定要记得在最外层的标签上,加一个key属性,不加代码也可以实现,但是效率就变低了\r\n// 6. 组件: 就是将结构和数据,封装起来,实现复用\r\n//        函数组件\r\n//        类组件   可以定义状态\r\n// 如果要修改状态的值,要使用setState. 既可以修改状态.又可以更新视图\r\n\r\n// class Demo extends React.Component {\r\n//   constructor() {\r\n//     super()\r\n//     this.state = {\r\n//       count: 0\r\n//     }\r\n//   }\r\n\r\n//   render() {\r\n//     return <div>{this.state.count}</div>\r\n//   }\r\n// }\r\n"],"sourceRoot":""}